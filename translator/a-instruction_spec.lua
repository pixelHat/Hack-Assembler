local AInstruction = require("parser.a-instruction")
local Translator = require("translator.a-instruction")
local SymbolTable = require("translator.symbol-table")

local symbol_table = SymbolTable.new()

describe("Translate A Instruction", function()
	describe("Decimal value", function()
		it("returns the 16 bit binary version", function()
			local instruction = AInstruction.new("@10")
			local translator = Translator.new(instruction, symbol_table)
			local sut = translator:translate()
			assert.are.equals(sut, "0000000000001010")
		end)
	end)

	describe("Variable", function()
		it("returns the variable binary value", function()
			local instruction = AInstruction.new("@i")
			local translator = Translator.new(instruction, symbol_table)
			local sut = translator:translate()
			assert.are.equals(sut, "0000000000010000")
		end)
	end)

	describe("Default registers", function()
		it("returns the default register", function()
			local instruction = AInstruction.new("@R0")
			local translator = Translator.new(instruction, symbol_table)
			local sut = translator:translate()
			assert.are.equals(sut, "0000000000000000")
		end)
	end)
end)
